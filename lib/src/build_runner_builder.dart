import 'config.dart';
import 'generator.dart';
import 'package:build/build.dart';

/// Build runner builder for asset generation.
///
/// This class provides integration with the build_runner system, allowing
/// asset generation to be part of the automated build process. It watches
/// for changes to `asset_gen.yaml` and generates the corresponding asset
/// constants file.
///
/// ## Usage
///
/// Add to your `build.yaml`:
///
/// ```yaml
/// targets:
///   $default:
///     builders:
///       flutter_asset_gen|assetGenBuilder:
///         enabled: true
///         options:
///           output: lib/generated/assets.dart
///           class_name: Assets
/// ```
///
/// Then run:
///
/// ```bash
/// dart run build_runner build
/// ```
class AssetGenBuilder extends Builder {
  /// Creates a new [AssetGenBuilder].
  AssetGenBuilder();

  @override

  /// Defines the build extensions for this builder.
  ///
  /// Maps `asset_gen.yaml` input files to generated Dart output files.
  Map<String, List<String>> get buildExtensions => {
        'asset_gen.yaml': ['lib/generated/assets.dart'],
      };

  @override

  /// Performs the asset generation build step.
  ///
  /// This method is called by build_runner when it detects changes to
  /// `asset_gen.yaml` files. It reads the configuration, generates
  /// the asset constants, and writes the output file.
  ///
  /// [buildStep] The build step context provided by build_runner.
  Future<void> build(BuildStep buildStep) async {
    final configFile = AssetId('', 'asset_gen.yaml');

    if (!await buildStep.canRead(configFile)) {
      return;
    }

    final configContent = await buildStep.readAsString(configFile);
    var config = _parseConfigFromString(configContent);

    // Set build runner mode
    config = config.copyWith(buildRunnerMode: true);

    final result = await generateAssets(
      config: config,
      verbose: false,
    );

    if (!result.skipped) {
      final outputId = AssetId('', config.output);
      await buildStep.writeAsString(outputId, _generateContent(config, result));
    }
  }

  /// Parses configuration from a YAML string.
  ///
  /// This is a simplified YAML parser for the build_runner context.
  /// It extracts key configuration options from the YAML content.
  ///
  /// ## Supported Options
  ///
  /// - `output`: Output file path
  /// - `class_name`: Generated class/enum name
  /// - `generate_enum`: Whether to generate enum output
  /// - `roots`: Asset directories to scan
  ///
  /// [content] The YAML configuration content as a string.
  ///
  /// Returns an [AssetGenConfig] with the parsed options.
  AssetGenConfig _parseConfigFromString(String content) {
    // Simple YAML parsing for build_runner context
    final lines = content.split('\n');
    final config = AssetGenConfig.defaults();

    for (final line in lines) {
      final trimmed = line.trim();
      if (trimmed.isEmpty || trimmed.startsWith('#')) continue;

      if (trimmed.startsWith('roots:')) {
        // Parse roots array
        final roots = <String>[];
        // This is a simplified parser - in production you'd want a proper YAML parser
        continue;
      }

      if (trimmed.startsWith('output:')) {
        final output = trimmed.substring('output:'.length).trim();
        return config.copyWith(output: output);
      }

      if (trimmed.startsWith('class_name:')) {
        final className = trimmed.substring('class_name:'.length).trim();
        return config.copyWith(className: className);
      }

      if (trimmed.startsWith('generate_enum:')) {
        final value = trimmed.substring('generate_enum:'.length).trim();
        return config.copyWith(generateEnum: value == 'true');
      }
    }

    return config;
  }

  /// Generates the content for the output file.
  ///
  /// This method creates the actual Dart code that will be written
  /// to the output file. It uses the configuration and generation
  /// result to produce the appropriate content.
  ///
  /// [config] The configuration used for generation.
  /// [result] The result of the asset generation process.
  ///
  /// Returns the generated Dart code as a string.
  String _generateContent(AssetGenConfig config, GenerationResult result) {
    // This would generate the actual content
    // For now, we'll use the existing generator
    return '// Generated by build_runner\n// TODO: Implement content generation';
  }
}

/// Creates a new [AssetGenBuilder] instance.
///
/// This function is used by build_runner to create instances of the
/// [AssetGenBuilder]. It's the entry point for the build_runner
/// integration.
///
/// [options] The builder options from build.yaml.
///
/// Returns a new [AssetGenBuilder] instance.
Builder assetGenBuilder(BuilderOptions options) => AssetGenBuilder();
